Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the resources will be created
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Private subnet ID where the resources will be created
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Private subnet ID where the resources will be created
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet ID where the resources will be created
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet ID where the resources will be created
  ECRRepositoryArn:
    Type: String
    Description: ARN of the ECR repository containing the Docker image to deploy
  ServiceName:
    Type: String
    Description: Name of the service to deploy
  TaskName: 
    Type: String
    Description: Name of the task to deploy
  ClusterName:
    Type: String
    Description: Name of the ECS cluster to use for the service
  PortMappings:
    Type: Number
    Description: Port mappings for the container
  ECSClusterId: 
    Type: String
    Description: ECSCluster ID
  CertificateArn:
    Type: String
    Description: Insert ARN Certificate for used
  LogsGroup:
    Type: String
    Description: Name of the CloudWatch Logs group to use for the container
  CPU: 
    Type: String
    Description: CPU units for the task
    AllowedValues: 
      - '256'
      - '512'
      - '1024'
      - '2048'
      - '4096'
      - '8192'
      - '16384'
    Default : '256'
  Memory:
    Type: String
    Description: Memory for the task
    AllowedValues: 
      - '512'
      - '1024'
      - '2048'
      - '3072'
      - '4096'
      - '5120'
      - '6144'
      - '7168'
      - '8192'
      - '9216'
      - '10240'
      - '11264'
      - '12288'
      - '13312'
      - '14336'
      - '15360'
      - '16384'
      - '17408'
      - '18432'
      - '19456'
      - '20480'
      - '21504'
      - '22528'
      - '23552'
      - '24576'
      - '25600'
      - '26624'
      - '27648'
      - '28672'
      - '29696'
      - '30720'
    Default: '512'
    

Resources:
# ROLES
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ecs-tasks
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "application-autoscaling.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "ecs-service-autoscaling"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"

# Segurity Groups
  SecurityGroupECS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to ECS Fargate service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref PortMappings
          ToPort: !Ref PortMappings
          SourceSecurityGroupId: !Ref SecurityGroupALB
  SecurityGroupALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to ECS Fargate service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
# ECS
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - TaskExecutionRole
    Properties:
      Family: !Join ['-', [!Ref ServiceName, 'Family-task']]
      ExecutionRoleArn: !Ref TaskExecutionRole
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref CPU
      Memory: !Ref Memory
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref ServiceName, 'container-task']]
          Image: !Ref ECRRepositoryArn
          PortMappings:
            - ContainerPort: !Ref PortMappings
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsGroup
              awslogs-region: "eu-west-1"
              awslogs-stream-prefix: !Ref TaskName
          

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - SecurityGroupECS
      - TaskDefinition
      - ALBListenerSsl
    Properties:
      Cluster: !Ref ECSClusterId
      ServiceName: !Ref ServiceName
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref SecurityGroupECS
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: !Join ['-', [!Ref ServiceName, 'container-task']]
          ContainerPort:  !Ref PortMappings
          TargetGroupArn: !Ref TargetGroup
      # Configuraci√≥n de despliegue de CodeDeploy
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50

  ScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: 
      - ECSService
      - ScalingRole
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Join [ "/", ["service", !Ref ClusterName, !GetAtt ECSService.Name] ]
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  CPUScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: 
      - ScalingTarget
    Properties:
      PolicyName:  !Join ['-', [!Ref ServiceName, 'PolicyCPUScaling']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        PredefinedMetricSpecification:
          PredefinedMetricType: "ECSServiceAverageCPUUtilization"
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  RAMScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: 
      - ScalingTarget
    Properties:
      PolicyName:  !Join ['-', [!Ref ServiceName, 'PolicyRamScaling']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 80.0

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:  !Join ['-', [!Ref ServiceName, 'ALB']]
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroupALB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: TargetGroup
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: '443'
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
  ALBListenerSsl:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: TargetGroup
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Certificates:
        - CertificateArn: !Ref CertificateArn
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-', [!Ref ServiceName, 'Tg-1']]
      Port: !Ref PortMappings
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200-499
  TargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-', [!Ref ServiceName, 'Tg-2']]
      Port: !Ref PortMappings
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200-499

Outputs:
  LoadBalancerDNS:
    Value: !GetAtt ALB.DNSName
    Description: DNS name of the load balancer
  TargetGroupArn:
    Value: !Ref TargetGroup
    Description: ARN of the target group
  ServiceArn:
    Value: !Ref ServiceName
    Description: ARN of the ECS service
  TaskDefinitionArn:
    Value: !Ref TaskDefinition
    Description: ARN of the ECS task definition



